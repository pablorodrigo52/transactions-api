// Code generated by MockGen. DO NOT EDIT.
// Source: ./transaction_cache.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/pablorodrigo52/transaction-api/cmd/internal/model"
)

// MockTransactionCache is a mock of TransactionCache interface.
type MockTransactionCache struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionCacheMockRecorder
}

// MockTransactionCacheMockRecorder is the mock recorder for MockTransactionCache.
type MockTransactionCacheMockRecorder struct {
	mock *MockTransactionCache
}

// NewMockTransactionCache creates a new mock instance.
func NewMockTransactionCache(ctrl *gomock.Controller) *MockTransactionCache {
	mock := &MockTransactionCache{ctrl: ctrl}
	mock.recorder = &MockTransactionCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionCache) EXPECT() *MockTransactionCacheMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockTransactionCache) Get(transactionID int64) *model.Transaction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", transactionID)
	ret0, _ := ret[0].(*model.Transaction)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockTransactionCacheMockRecorder) Get(transactionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTransactionCache)(nil).Get), transactionID)
}

// Save mocks base method.
func (m *MockTransactionCache) Save(transactionID int64, transaction *model.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", transactionID, transaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockTransactionCacheMockRecorder) Save(transactionID, transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockTransactionCache)(nil).Save), transactionID, transaction)
}
