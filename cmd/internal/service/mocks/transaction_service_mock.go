// Code generated by MockGen. DO NOT EDIT.
// Source: ./transaction_service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/pablorodrigo52/transaction-api/cmd/internal/model"
	presentation "github.com/pablorodrigo52/transaction-api/cmd/internal/presentation"
)

// MockTransactionService is a mock of TransactionService interface.
type MockTransactionService struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionServiceMockRecorder
}

// MockTransactionServiceMockRecorder is the mock recorder for MockTransactionService.
type MockTransactionServiceMockRecorder struct {
	mock *MockTransactionService
}

// NewMockTransactionService creates a new mock instance.
func NewMockTransactionService(ctrl *gomock.Controller) *MockTransactionService {
	mock := &MockTransactionService{ctrl: ctrl}
	mock.recorder = &MockTransactionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionService) EXPECT() *MockTransactionServiceMockRecorder {
	return m.recorder
}

// DeleteTransactionByID mocks base method.
func (m *MockTransactionService) DeleteTransactionByID(transactionID int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteTransactionByID", transactionID)
}

// DeleteTransactionByID indicates an expected call of DeleteTransactionByID.
func (mr *MockTransactionServiceMockRecorder) DeleteTransactionByID(transactionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTransactionByID", reflect.TypeOf((*MockTransactionService)(nil).DeleteTransactionByID), transactionID)
}

// GetTransactionByID mocks base method.
func (m *MockTransactionService) GetTransactionByID(transactionID int64) *presentation.TransactionDTO {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionByID", transactionID)
	ret0, _ := ret[0].(*presentation.TransactionDTO)
	return ret0
}

// GetTransactionByID indicates an expected call of GetTransactionByID.
func (mr *MockTransactionServiceMockRecorder) GetTransactionByID(transactionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionByID", reflect.TypeOf((*MockTransactionService)(nil).GetTransactionByID), transactionID)
}

// SaveTransaction mocks base method.
func (m *MockTransactionService) SaveTransaction(transaction *model.Transaction) *presentation.TransactionDTO {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTransaction", transaction)
	ret0, _ := ret[0].(*presentation.TransactionDTO)
	return ret0
}

// SaveTransaction indicates an expected call of SaveTransaction.
func (mr *MockTransactionServiceMockRecorder) SaveTransaction(transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTransaction", reflect.TypeOf((*MockTransactionService)(nil).SaveTransaction), transaction)
}

// UpdateTransactionByID mocks base method.
func (m *MockTransactionService) UpdateTransactionByID(transactionID int64, transaction *model.Transaction) *presentation.TransactionDTO {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTransactionByID", transactionID, transaction)
	ret0, _ := ret[0].(*presentation.TransactionDTO)
	return ret0
}

// UpdateTransactionByID indicates an expected call of UpdateTransactionByID.
func (mr *MockTransactionServiceMockRecorder) UpdateTransactionByID(transactionID, transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransactionByID", reflect.TypeOf((*MockTransactionService)(nil).UpdateTransactionByID), transactionID, transaction)
}
