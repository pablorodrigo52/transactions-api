// Code generated by MockGen. DO NOT EDIT.
// Source: ./transaction_currency_service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	presentation "github.com/pablorodrigo52/transaction-api/cmd/internal/presentation"
)

// MockTransactionCurrencyService is a mock of TransactionCurrencyService interface.
type MockTransactionCurrencyService struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionCurrencyServiceMockRecorder
}

// MockTransactionCurrencyServiceMockRecorder is the mock recorder for MockTransactionCurrencyService.
type MockTransactionCurrencyServiceMockRecorder struct {
	mock *MockTransactionCurrencyService
}

// NewMockTransactionCurrencyService creates a new mock instance.
func NewMockTransactionCurrencyService(ctrl *gomock.Controller) *MockTransactionCurrencyService {
	mock := &MockTransactionCurrencyService{ctrl: ctrl}
	mock.recorder = &MockTransactionCurrencyServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionCurrencyService) EXPECT() *MockTransactionCurrencyServiceMockRecorder {
	return m.recorder
}

// GetTransactionCurrencyConverted mocks base method.
func (m *MockTransactionCurrencyService) GetTransactionCurrencyConverted(ctx context.Context, transactionID int64, country string) *presentation.TransactionCurrencyDTO {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionCurrencyConverted", ctx, transactionID, country)
	ret0, _ := ret[0].(*presentation.TransactionCurrencyDTO)
	return ret0
}

// GetTransactionCurrencyConverted indicates an expected call of GetTransactionCurrencyConverted.
func (mr *MockTransactionCurrencyServiceMockRecorder) GetTransactionCurrencyConverted(ctx, transactionID, country interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionCurrencyConverted", reflect.TypeOf((*MockTransactionCurrencyService)(nil).GetTransactionCurrencyConverted), ctx, transactionID, country)
}
