{
	"info": {
		"_postman_id": "2e06ee57-5526-4e3d-bcfe-db9d789ecf08",
		"name": "API Documentation",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "6232608",
		"_collection_link": "https://transactions-api-1331.postman.co/workspace/transactions-api~a7533e37-0479-40f4-bf15-9e749d4fc2d4/collection/6232608-2e06ee57-5526-4e3d-bcfe-db9d789ecf08?action=share&source=collection_link&creator=6232608"
	},
	"item": [
		{
			"name": "Ping",
			"item": [
				{
					"name": "ping",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is pong\", function () {\r",
									"    pm.response.to.have.body(\"pong\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/ping",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"ping"
							]
						}
					},
					"response": []
				}
			],
			"description": "This endpoint is the healthy check. Is composed only by `GET /ping` endpoint and must return the \"pong\" string when called.\n\nIn the request we have the tests:\n\n``` javascript\npm.test(\"Status code is 200\", function () {    \n    pm.response.to.have.status(200);\n});\npm.test(\"Response is pong\", function () {    \n    pm.response.to.have.body(\"pong\");\n});\n\n ```"
		},
		{
			"name": "Transactions",
			"item": [
				{
					"name": "get transaction by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"transaction_id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"description\");\r",
									"    pm.expect(pm.response.text()).to.include(\"transaction_date\");\r",
									"    pm.expect(pm.response.text()).to.include(\"purchase_amount\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": \"Mock description for this transaction\",\r\n    \"transaction_date\": \"2024-12-27\",\r\n    \"purchase_amount\": 1699.96\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/v1/transaction/18",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"v1",
								"transaction",
								"18"
							]
						}
					},
					"response": []
				},
				{
					"name": "create transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"transaction_id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"description\");\r",
									"    pm.expect(pm.response.text()).to.include(\"transaction_date\");\r",
									"    pm.expect(pm.response.text()).to.include(\"purchase_amount\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": \"Mock description for this transaction\",\r\n    \"transaction_date\": \"2018-09-26T10:36:40Z\",\r\n    \"purchase_amount\": 12.344\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/v1/transaction",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"v1",
								"transaction"
							]
						}
					},
					"response": []
				},
				{
					"name": "update transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"transaction_id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"description\");\r",
									"    pm.expect(pm.response.text()).to.include(\"transaction_date\");\r",
									"    pm.expect(pm.response.text()).to.include(\"purchase_amount\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": \"Updating mock description for this transaction\",\r\n    \"transaction_date\": \"2024-12-29T11:31:40Z\",\r\n    \"purchase_amount\": 110\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/v1/transaction/22",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"v1",
								"transaction",
								"22"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/v1/transaction/18",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"v1",
								"transaction",
								"18"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Transaction Currency Converter",
			"item": [
				{
					"name": "transaction currency converter",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/v1/converter/transaction/25/currency/Eritrea",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"v1",
								"converter",
								"transaction",
								"25",
								"currency",
								"Eritrea"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}